1) 

Given an array of objects of student's marks:
Print the name and total marks of each student.
Print the name of student whose total marks is highest.
Print the name of student whose total marks is lowest.
Print the average marks of the class in computer subject.
Print the grades of all students:
Grade A if total marks is higher than or equal to 75%,
Grade B if higher than or equal to 60%,
Grade C if higher than or equal to 35%,
Grade D if lower than 35%.
Print the total number of students passed and their names. Pass when total marks is greater than 35%.
const studentDetails = [
	{
		roll: "1",
		name: "Rohan Singh",
		maths: 86,
		science: 90,
		english: 75,
		computer: 85
	},
	{
		roll: "2",
		name: "Ritvik Patel",
		maths: 27,
		science: 30,
		english: 35,
		computer: 30
	},
	{
		roll: "3",
		name: "Neha Maurya",
		maths: 75,
		science: 69,
		english: 40,
		computer: 75
	},
	{
		roll: "4",
		name: "Mohit Verma",
		maths: 21,
		science: 31,
		english: 45,
		computer: 40
	},
	{
		roll: "5",
		name: "Karan Trivedi",
		maths: 70,
		science: 80,
		english: 35,
		computer: 60
	}
];


Solution :-


1)           const objects = (nums) => {
             return nums.map((ele) => {
                return {
                  name: ele.name,
                  TotoalMarks :ele.maths+ele.science+ele.english+ele.computer
              }
            })
            };
	    
            const objects = (nums) => {
              return nums.map((ele) =>({ name:ele.name,totalMarks:ele.maths+ele.science+ele.english+ele.computer}))
            }
           
           
2)           const objects = (nums) => {
            let totalMarks = nums.map((ele) => ({ name: ele.name, totalMarks: ele.maths + ele.science + ele.english + ele.computer }))
            let min = Infinity
            let result
            for (i = 0; i < totalMarks.length; i++){
              if (totalMarks[i].totalMarks < min) {
                min = totalMarks[i].totalMarks
                result=totalMarks[i]
              }
            }
            return result
          }    
	  
    
3)       const objects = (nums) => {
	 return (nums.map((ele)=>ele.computer).reduce((acc,ele)=>acc+ele))/2
	};
	console.log(objects(studentDetails));
	
	 const objects = (nums) => {
         return (nums.reduce((acc,ele)=>acc+ele.computer,0))/2
         };
         console.log(objects(studentDetails));

	
4)	
		// helper function
		   const grad = (totalMarks) => {
		  if (totalMarks >= 75) {
		    return"A"
		  }
		  else if (totalMarks < 75 && totalMarks >= 60) {
		    return"B"
		  }
		  else if (totalMarks < 60 && totalMarks >= 35) {
		    return"C"
		  }
		  else if (totalMarks < 35) {
		    return"D"
		  }
		}
		// actual code
		const objects = (nums) => {
		  return nums.map((ele) => ({ name: ele.name, totalMarks: ((ele.maths + ele.science + ele.english + ele.computer) / 400) * 100 }))
		    .map((ele) => {
		      return {
			...ele,
			grade:grad(ele.totalMarks)
		    }
		  })
		};
		console.log(objects(studentDetails));

5)   
		// actual code
		const objects = (nums) => {
		  result = nums.map((ele) => ({ name: ele.name, totalMarks: ((ele.maths + ele.science + ele.english + ele.computer) / 400) * 100 })).filter((ele) => ele.totalMarks > 35)
		  console.log(result);
		  console.log(result.length);

		};
		console.log(objects(studentDetails));
		

==>2) Salary calculation using OOPS concept.
Create a Class using ES6 in JavaScript named Employee and assign necessary
data members and methods such as name, id, basic salary, HRA, Allowances; define getSalary method which will return the net salary.
Create two Instances of Employee with all necessary details.
Call the getSalary method of each instance and return the net salary based on your computation.
Solution:

		class Employese{
		  constructor(name, id, basicSalary, HRA, allowance) {
		    this.name = name;
		    this.id = id;
		    this.basicSalary = basicSalary;
		    this.HRA = HRA;
		    this.allowance = allowance;

		  }
		  getSalary() {
		    return this.basicSalary+this.HRA + this.allowance
		  }
		}
		const person1 = new Employese("Akshay", 2020, 100000, 20000, 12222)
		const person1 = new Employese("Ajax", 2021, 123000, 23000, 12132)
		
		
3)q03
Bank Account (Object Oriented Programming in JavaScript)

Create a class and define data members such as name, bank account number,
account balance, account type, ifsc and name it as BankAccount.
Create three Instances(three customers) of BankAccount with all necessary details.
Print the name of customers and their account balances.
Calculate the average account balance from all the instances.
Solution:
		class BankAccount{
		  constructor(name, accountNumber, accountBalance, accountType,IFSC) {
		    this.name = name;
		    this.accountNumber = accountNumber;
		    this.accountBalance = accountBalance;
		    this.accountType = accountType;
		    this.IFSC = IFSC;
		    console.log(name);
		    console.log(accountBalance);
		  };

		  averageAccountBalance() {
		    return this.accountBalance
		  }
		}

		const person1 = new BankAccount("Akshay", 2020, 100000, "savings", 12222)
		const person2 = new BankAccount("Ajax", 2021, 123000, "savings", 12132)
		const person3 = new BankAccount("Ajax", 2021, 123000, "savings", 12132)
		console.log((person1.averageAccountBalance()+person2.averageAccountBalance()+person3.averageAccountBalance())/2);


4)Given an array of objects of items in cart, print:

the total No. of items
the total cart value
the total discounted value(sum of dicounted values on each item) based on the given discount
total tax amount (18% tax, calculated on total cart value)
const cartItems = [
	{
		id: "101",
		name: "Oreo",
		count: 2,
		price: 30.0,
		discount: 0.18
	},
	{
		id: "102",
		name: "Red Bull",
		count: 1,
		price: 99.0,
		discount: 0.15
	},
	{
		id: "103",
		name: "Dairy Milk Silk",
		count: 3,
		price: 175.0,
		discount: 0.05
	},
	{
		id: "104",
		name: "Pulse Candy Pack",
		count: 1,
		price: 135.0,
		discount: 0.2
	}
];

SOlution:
		1)const oops = (cartItems) => {
		  return cartItems.length
		}
		console.log(oops(cartItems));
		
		2) const oops = (cartItems) => {
		 return cartItems.reduce((acc,ele)=>acc+ele.price,1)
		}
		console.log(oops(cartItems));
		
		3)const oops = (cartItems) => {
		  return cartItems.reduce((acc,ele)=>acc+ele.discount*ele.price,1)
		}
		console.log(oops(cartItems));	
		
		4)const oops = (cartItems) => {
		  return cartItems.reduce((acc,ele)=>acc+0.18*ele.price,1)
		}
		console.log(oops(cartItems));		
